{"version":3,"sources":["components/DefaultList.js","components/CustomList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","listItem","backgroundColor","palette","background","paper","userSelect","DefaultList","classes","useState","items","setItems","List","map","text","i","key","onSwipeLeft","filter","e","onSwipeRight","alert","handleSwipeRight","ListItem","className","ListItemText","useTheme","index","match","swipeLeftConfig","color","success","main","icon","Add","moveOutOfScreen","container","maxWidth","margin","spacing","padding","overflowX","marginBottom","App","CssBaseline","Typography","variant","Button","varaint","href","target","CustomList","Boolean","window","location","hostname","createMuiTheme","type","default","primary","secondary","dark","error","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a858036f.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Swipeable from \"react-mui-swipeable\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItem: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        userSelect: \"none\"\r\n    }\r\n}))\r\n\r\nfunction DefaultList() {\r\n    const classes = useStyles()\r\n\r\n    const [items, setItems] = useState([\"Swipe me #1\", \"Swipe me #2\", \"Swipe me #3\", \"Swipe me #4\", \"Swipe me #5\"])\r\n\r\n    const handleSwipeLeft = index => {\r\n        delete items[index]\r\n        setItems([...items.filter(e => e)])\r\n    }\r\n\r\n    const handleSwipeRight = text => {\r\n        alert(\"Swiped: \" + text)\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {items.map((text, i) => (\r\n                <Swipeable\r\n                    key={text}\r\n                    onSwipeLeft={() => handleSwipeLeft(i)}\r\n                    onSwipeRight={() => handleSwipeRight(text)}\r\n                >\r\n                    <ListItem className={classes.listItem}>\r\n                        <ListItemText>{text}</ListItemText>\r\n                    </ListItem>\r\n                </Swipeable>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default DefaultList","import React, { useState } from \"react\"\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\"\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\r\nimport Add from \"@material-ui/icons/Add\"\r\nimport Swipeable from \"react-mui-swipeable\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItem: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        userSelect: \"none\"\r\n    }\r\n}))\r\n\r\nfunction DefaultList() {\r\n    const theme = useTheme()\r\n\r\n    const classes = useStyles()\r\n\r\n    const [items, setItems] = useState([\"Swipe me left #1\", \"Swipe me left #2\", \"Swipe me left #3\", \"Swipe me left #4\", \"Swipe me left #5\"])\r\n\r\n    const handleSwipeLeft = (index) => {\r\n        items[index] = \"Swipe me left #\" + (+items[index].match(/\\d+/)[0] + 1)\r\n        setItems([...items])\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {items.map((text, i) => (\r\n                <Swipeable\r\n                    key={i}\r\n                    onSwipeLeft={() => handleSwipeLeft(i)}\r\n                    swipeLeftConfig={{\r\n                        color: theme.palette.success.main,\r\n                        icon: Add,\r\n                        moveOutOfScreen: false\r\n                    }}\r\n                >\r\n                    <ListItem className={classes.listItem}>\r\n                        <ListItemText>{text}</ListItemText>\r\n                    </ListItem>\r\n                </Swipeable>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default DefaultList","import React from \"react\"\r\nimport { CssBaseline, Typography, Button } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nimport DefaultList from \"./components/DefaultList.js\"\r\nimport CustomList from \"./components/CustomList.js\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        maxWidth: 500,\r\n        margin: `${theme.spacing(2)}px auto 0 auto`,\r\n        padding: `0 ${theme.spacing(2)}px`,\r\n        overflowX: \"hidden\"\r\n    },\r\n\r\n    spacing: {\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n\r\n    listItem: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        userSelect: \"none\"\r\n    }\r\n}))\r\n\r\nfunction App() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <CssBaseline/>\r\n\r\n            <div className={classes.spacing}>\r\n                <Typography variant=\"h3\">React Mui Swipeable</Typography>\r\n                <Typography variant=\"h6\">Works best on mobile</Typography>\r\n            </div>\r\n\r\n            <div className={classes.spacing}>\r\n                <DefaultList/>\r\n                <Button\r\n                    varaint=\"link\"\r\n                    href=\"https://github.com/Tracer1337/react-mui-swipeable/tree/master/demo/src/components/DefaultList.js\"\r\n                    target=\"_blank\"\r\n                >View source</Button>\r\n            </div>\r\n\r\n            <div className={classes.spacing}>\r\n                <CustomList/>\r\n                <Button\r\n                    varaint=\"link\"\r\n                    href=\"https://github.com/Tracer1337/react-mui-swipeable/tree/master/demo/src/components/CustomList.js\"\r\n                    target=\"_blank\"\r\n                >View source</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\"\r\n\r\nimport App from \"./App.js\"\r\nimport * as serviceWorker from \"./serviceWorker.js\"\r\nimport \"./index.css\"\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        theme: \"dark\",\r\n        type: \"dark\",\r\n\r\n        background: {\r\n            default: \"#282833\",\r\n            paper: \"#333340\"\r\n        },\r\n\r\n        primary: {\r\n            main: \"#BB86FC\",\r\n            variant: \"#3700B3\"\r\n        },\r\n\r\n        secondary: {\r\n            main: \"#03DAC5\",\r\n            dark: \"#336D6F\"\r\n        },\r\n\r\n        error: {\r\n            main: \"#CF6679\"\r\n        }\r\n    }\r\n})\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <App/>\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()"],"sourceRoot":""}